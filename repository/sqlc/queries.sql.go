// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
)

const upsertDevices = `-- name: UpsertDevices :one
INSERT INTO devices (id, name, project_id)
VALUES (?1, ?2, ?3)
ON CONFLICT(name, project_id) DO UPDATE
    SET name = EXCLUDED.name
RETURNING id
`

type UpsertDevicesParams struct {
	ID        string
	Name      string
	ProjectID string
}

func (q *Queries) UpsertDevices(ctx context.Context, arg UpsertDevicesParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertDevices, arg.ID, arg.Name, arg.ProjectID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const upsertParticipants = `-- name: UpsertParticipants :one
INSERT INTO participants (id, name, project_id)
VALUES (?1, ?2, ?3)
ON CONFLICT(name, project_id) DO UPDATE
    SET name = EXCLUDED.name
RETURNING id
`

type UpsertParticipantsParams struct {
	ID        string
	Name      string
	ProjectID string
}

func (q *Queries) UpsertParticipants(ctx context.Context, arg UpsertParticipantsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertParticipants, arg.ID, arg.Name, arg.ProjectID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const upsertWinfitts = `-- name: UpsertWinfitts :one
INSERT INTO winfitts (id, project_id, device_id, participant_id)
VALUES (?1, ?2, ?3, ?4)
ON CONFLICT(project_id, device_id, participant_id) DO UPDATE
    SET device_id = EXCLUDED.device_id
RETURNING id
`

type UpsertWinfittsParams struct {
	ID            string
	ProjectID     string
	DeviceID      string
	ParticipantID string
}

func (q *Queries) UpsertWinfitts(ctx context.Context, arg UpsertWinfittsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertWinfitts,
		arg.ID,
		arg.ProjectID,
		arg.DeviceID,
		arg.ParticipantID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const upsertWinfittsDetail = `-- name: UpsertWinfittsDetail :one
INSERT INTO winfitts_details (id, information_id, mark, x, y, created_at)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
ON CONFLICT(information_id, created_at) DO UPDATE
    SET created_at = EXCLUDED.created_at
RETURNING id
`

type UpsertWinfittsDetailParams struct {
	ID            string
	InformationID string
	Mark          string
	X             int64
	Y             int64
	CreatedAt     string
}

func (q *Queries) UpsertWinfittsDetail(ctx context.Context, arg UpsertWinfittsDetailParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertWinfittsDetail,
		arg.ID,
		arg.InformationID,
		arg.Mark,
		arg.X,
		arg.Y,
		arg.CreatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const upsertWinfittsInformation = `-- name: UpsertWinfittsInformation :one
INSERT INTO winfitts_information (id, winfitts_id, trail_number, width, distance, angle, is_failed, error_times, deleted)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9)
ON CONFLICT(winfitts_id, trail_number) DO UPDATE
    SET is_failed = EXCLUDED.is_failed,
    error_times = EXCLUDED.error_times,
    deleted = EXCLUDED.deleted
RETURNING id
`

type UpsertWinfittsInformationParams struct {
	ID          string
	WinfittsID  string
	TrailNumber int64
	Width       int64
	Distance    int64
	Angle       int64
	IsFailed    bool
	ErrorTimes  int64
	Deleted     bool
}

func (q *Queries) UpsertWinfittsInformation(ctx context.Context, arg UpsertWinfittsInformationParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertWinfittsInformation,
		arg.ID,
		arg.WinfittsID,
		arg.TrailNumber,
		arg.Width,
		arg.Distance,
		arg.Angle,
		arg.IsFailed,
		arg.ErrorTimes,
		arg.Deleted,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
