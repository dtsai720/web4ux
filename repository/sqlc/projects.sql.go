// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package sqlc

import (
	"context"
)

const listProjects = `-- name: ListProjects :many
SELECT id, name, creator, updated_at FROM projects
WHERE (COALESCE(?1, '') = '' OR id = ?1)
AND (COALESCE(?2, '') = '' OR name = ?2)
AND (COALESCE(?3, '') = '' OR creator = ?3)
`

type ListProjectsParams struct {
	ID      interface{}
	Name    interface{}
	Creator interface{}
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects, arg.ID, arg.Name, arg.Creator)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Creator,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertProject = `-- name: UpsertProject :one
INSERT INTO projects (id, name, creator, updated_at)
VALUES (?1, ?2, ?3, ?4)
ON CONFLICT(id) DO UPDATE SET
    name = EXCLUDED.name,
    creator = EXCLUDED.creator,
    updated_at = EXCLUDED.updated_at
RETURNING id
`

type UpsertProjectParams struct {
	ID        string
	Name      string
	Creator   string
	UpdatedAt string
}

func (q *Queries) UpsertProject(ctx context.Context, arg UpsertProjectParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertProject,
		arg.ID,
		arg.Name,
		arg.Creator,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
