// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (uid, email, password)
VALUES
    (?, ?, ?) RETURNING uid
`

type CreateUserParams struct {
	Uid      string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Uid, arg.Email, arg.Password)
	var uid string
	err := row.Scan(&uid)
	return uid, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    uid, email, password
FROM
    users
WHERE
    uid = ?
`

func (q *Queries) ListUsers(ctx context.Context, uid string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Uid, &i.Email, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
